(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{442:function(t,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"相等操作符-值相等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相等操作符-值相等"}},[t._v("#")]),t._v(" 相等操作符(值相等)")]),t._v(" "),s("h3",{attrs:{id:"强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[t._v("#")]),t._v(" 强制类型转换")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("布尔值(Boolean())")]),t._v(" "),s("ul",[s("li",[t._v("空字符串转换为false，其它任意字符串为true（包括空格串）")]),t._v(" "),s("li",[t._v("0与NaN转换为false，其它数值为true；NaN表示一个操作结果应该返回数值但却没有返回数值的情况")]),t._v(" "),s("li",[t._v("undefind与null转换为false")]),t._v(" "),s("li",[t._v("其它对象转换为true，包括空对象"),s("code",[t._v("{}")])])])])]),t._v(" "),s("p",[t._v("小结：空字符串，0，NaN，undefind，null都为false，其它为true")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("数值(Number())")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("true转换为 1，false为0，")])]),t._v(" "),s("li",[s("p",[t._v("null转换为0，")])]),t._v(" "),s("li",[s("p",[t._v("undefined转换为 NaN")])]),t._v(" "),s("li",[s("p",[t._v("字符串(parseInt()与parseFloat())")]),t._v(" "),s("ul",[s("li",[t._v("字符串只包含数字，转换为对应数字，前面有空格将忽略")]),t._v(" "),s("li",[t._v("空字符串，空格串，转换为0")]),t._v(" "),s("li",[t._v("其它的全部为NaN")])])])])]),t._v(" "),s("li",[s("p",[t._v("字符串")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("toString()")])]),t._v(" "),s("ul",[s("li",[t._v("null与undefind调用报错")]),t._v(" "),s("li",[t._v("数值变为字符串样式")]),t._v(" "),s("li",[t._v("布尔值为 'true' 'false'")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("String()")])]),t._v(" "),s("ul",[s("li",[t._v("null与undefined 转换为字符串样式 'null' 'undefined'")]),t._v(" "),s("li",[t._v("能用"),s("code",[t._v("toString")]),t._v("就先用")])])])])])]),t._v(" "),s("h3",{attrs:{id:"隐式转换相等比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换相等比较"}},[t._v("#")]),t._v(" 隐式转换相等比较")]),t._v(" "),s("p",[t._v("1, 如果任意操作数是布尔值，则将其转换为数值再比较相等")]),t._v(" "),s("p",[s("code",[t._v("let res = (true == 1) // true")])]),t._v(" "),s("p",[t._v("2, 如果一个操作数是字符串，另一操作数是数值，则尝试将字符串转换为数字，在比较相等")]),t._v(" "),s("p",[s("code",[t._v("let res = ('55' == 55)")])]),t._v(" "),s("p",[t._v("3, 如果一个操作数是对象，另一个操作数不是，则调用对象的"),s("code",[t._v("valueOf()")]),t._v("取得原始值，再进行比较")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("4, 如果有任意操作数是 "),s("code",[t._v("NaN")]),t._v(" ,则相等返回 false（NaN和任意数相等比较都不相等，包括自己）")]),t._v(" "),s("p",[s("code",[t._v("let res = (NaN == NaN) // false")])]),t._v(" "),s("p",[t._v("5, 对象比较为比较引用地址")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("p",[t._v("小结：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("两个都为简单类型，字符串和布尔值都会转换成数值，再比较")])]),t._v(" "),s("li",[s("p",[t._v("简单类型与引用类型比较，对象转化成其原始类型的值，再比较")])]),t._v(" "),s("li",[s("p",[t._v("两个都为引用类型，则比较它们是否指向同一个对象")])]),t._v(" "),s("li",[s("p",[t._v("null 和 undefined 相等")])]),t._v(" "),s("li",[s("p",[t._v("存在 NaN 则返回 false")])]),t._v(" "),s("li",[s("p",[t._v("null >= 0 为true null == 0 false null与0比较null不会转换类型")])])]),t._v(" "),s("h2",{attrs:{id:"全等操作符-类型相等-值也相等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全等操作符-类型相等-值也相等"}},[t._v("#")]),t._v(" 全等操作符(类型相等，值也相等)")]),t._v(" "),s("p",[t._v("undefined与null自身严格相等")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("1, 相等操作符（==）会做类型转换，再进行值的比较，全等运算符不会做类型转换")]),t._v(" "),s("p",[t._v("2, 除了在比较对象属性为null或者undefined的情况下，我们可以使用相等操作符（==），其他情况建议一律使用全等操作符（===）")]),t._v(" "),s("p",[t._v("参考链接: "),s("a",{attrs:{href:"https://www.developers.pub/wiki/1065322/1067398",target:"_blank",rel:"noopener noreferrer"}},[t._v("开发者客栈"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);